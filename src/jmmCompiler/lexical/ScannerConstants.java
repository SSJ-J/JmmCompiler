/* Generated By:JJTree&JavaCC: Do not edit this line. ScannerConstants.java */
package jmmCompiler.lexical;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ScannerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 8;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 9;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 10;
  /** RegularExpression Id. */
  int STRING_LITERAL = 11;
  /** RegularExpression Id. */
  int NULL_LITERAL = 12;
  /** RegularExpression Id. */
  int DECIMAL_NUMERAL = 13;
  /** RegularExpression Id. */
  int DIGITS = 14;
  /** RegularExpression Id. */
  int DIGIT = 15;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 16;
  /** RegularExpression Id. */
  int LETTER = 17;
  /** RegularExpression Id. */
  int CHARACTER = 18;
  /** RegularExpression Id. */
  int BOOLEAN = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int CHAR = 21;
  /** RegularExpression Id. */
  int CLASS = 22;
  /** RegularExpression Id. */
  int CONTINUE = 23;
  /** RegularExpression Id. */
  int DO = 24;
  /** RegularExpression Id. */
  int DOUBLE = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int FOREACH = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int INSTANCEOF = 31;
  /** RegularExpression Id. */
  int INT = 32;
  /** RegularExpression Id. */
  int NEW = 33;
  /** RegularExpression Id. */
  int PRIVATE = 34;
  /** RegularExpression Id. */
  int PROTECTED = 35;
  /** RegularExpression Id. */
  int PUBLIC = 36;
  /** RegularExpression Id. */
  int RETURN = 37;
  /** RegularExpression Id. */
  int STATIC = 38;
  /** RegularExpression Id. */
  int SUPER = 39;
  /** RegularExpression Id. */
  int THIS = 40;
  /** RegularExpression Id. */
  int VOID = 41;
  /** RegularExpression Id. */
  int WHILE = 42;
  /** RegularExpression Id. */
  int PLUS = 43;
  /** RegularExpression Id. */
  int MINUS = 44;
  /** RegularExpression Id. */
  int MULTIPLY = 45;
  /** RegularExpression Id. */
  int DIVIDE = 46;
  /** RegularExpression Id. */
  int MOD = 47;
  /** RegularExpression Id. */
  int UNDERSCORE = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int SEMICOLON = 50;
  /** RegularExpression Id. */
  int COLON = 51;
  /** RegularExpression Id. */
  int LP = 52;
  /** RegularExpression Id. */
  int RP = 53;
  /** RegularExpression Id. */
  int LSB = 54;
  /** RegularExpression Id. */
  int RSB = 55;
  /** RegularExpression Id. */
  int LB = 56;
  /** RegularExpression Id. */
  int RB = 57;
  /** RegularExpression Id. */
  int QUOTE = 58;
  /** RegularExpression Id. */
  int ASSIGN = 59;
  /** RegularExpression Id. */
  int EQUAL = 60;
  /** RegularExpression Id. */
  int LESS = 61;
  /** RegularExpression Id. */
  int BIGGER = 62;
  /** RegularExpression Id. */
  int LESS_OR_E = 63;
  /** RegularExpression Id. */
  int BIGGER_OR_E = 64;
  /** RegularExpression Id. */
  int AND = 65;
  /** RegularExpression Id. */
  int OR = 66;
  /** RegularExpression Id. */
  int NOT = 67;
  /** RegularExpression Id. */
  int NE = 68;
  /** RegularExpression Id. */
  int DOT = 69;
  /** RegularExpression Id. */
  int IDENTIFIER = 70;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"null\"",
    "<DECIMAL_NUMERAL>",
    "<DIGITS>",
    "<DIGIT>",
    "<NON_ZERO_DIGIT>",
    "<LETTER>",
    "<CHARACTER>",
    "\"boolean\"",
    "\"break\"",
    "\"char\"",
    "\"class\"",
    "\"continue\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"for\"",
    "\"foreach\"",
    "\"if\"",
    "\"instanceof\"",
    "\"int\"",
    "\"new\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"super\"",
    "\"this\"",
    "\"void\"",
    "\"while\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"_\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"\\\"\"",
    "\"=\"",
    "\"==\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\" >=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"!=\"",
    "\".\"",
    "<IDENTIFIER>",
  };

}
